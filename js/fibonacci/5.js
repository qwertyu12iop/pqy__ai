//递归  自顶向下 计算方程 退出条件
//自底向上 f(1)=1 f(2)=2 f(3)=f(2)+f(1)
//迭代的方法（入栈不需要）
//不需要额外的空间
//dp动态规划
const climbStairs = function(n){
    const f=[]; //数组
    f[1]=1; //f(1)=1
    f[2]=2; //f(2)=2
    for(let i=3;i<=n;i++){ //从3开始
        f[i]=f[i-1]+f[i-2]; //f(3)=f(2)+f(1)  
    }  
    return f[n]; //返回结果
}
